# baseURI: http://www.w3.org/ns/shacl-shacl#

# A SHACL shapes graph to validate Best Practices on SHACL shapes graphs
# Draft last edited 2020-03-12

@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sh:   <http://www.w3.org/ns/shacl#> .
@prefix xsd:  <http://www.w3.org/2001/XMLSchema#> .

@prefix bpsh: <http://itb.ec.europa.eu/ns/shacl-shacl-bp#> .

bpsh:LanguageTagShape			# text-language
	a sh:NodeShape ;
	sh:targetSubjectsOf sh:description, sh:name, sh:message ;
	
	sh:property [
		sh:path sh:description ;				
		sh:message "Both sh:name and sh:description may have multiple values, but should only have one value per language tag.";
		sh:uniqueLang true ;	
		sh:severity sh:Warning ;
	] ;
	
	sh:property [
		sh:path sh:name ;				
		sh:message "Both sh:name and sh:description may have multiple values, but should only have one value per language tag.";
		sh:uniqueLang true ;
		sh:severity sh:Warning ;
	] ;
	
	sh:property [
		sh:path sh:message ;				
		sh:message "A shape should not have more than one value for sh:message with the same language tag.";
		sh:uniqueLang true ;
		sh:severity sh:Warning ;
	] .
	
bpsh:MessageShape				# message
	a sh:NodeShape ;
	sh:targetClass sh:NodeShape ;
	sh:targetClass sh:PropertyShape ;
	
	sh:message "A shape should have at least one value for sh:message in the shapes graph, then all validation results produced as a result of the shape will have exactly these messages as their value of sh:resultMessage." ;
	sh:severity sh:Warning ;
		
	sh:or (
		[
			sh:property [
				sh:path sh:message ;
				sh:minCount 1 ;
			]
		]
		[
			sh:property [
				sh:path (sh:property sh:message) ;
				sh:minCount 1 ;
			] 
		]
		[
			sh:property [
				sh:path (sh:qualifiedValueShape sh:message) ;
				sh:minCount 1 ;
			] 
		]
		[
			sh:property [
				sh:path (sh:property sh:node) ;
				sh:minCount 1 ;
			] 
		]
	)  .
	
#bpsh:DefaultValueShape			# defaultvalue-datatype
#	a sh:NodeShape ;
#	sh:targetSubjectsOf sh:defaultValue ;
	
#	sh:property [
#		sh:path sh:defaultValue ;
#		sh:minCount 1 ;
#	] .


bpsh:NodePropertyShape		# nodeShape-properties
	a sh:NodeShape ;
	sh:targetClass sh:NodeShape ;	
	sh:closed true ;
	sh:ignoredProperties ( rdf:type rdfs:label rdfs:comment rdfs:seeAlso ) ;
	sh:severity sh:Warning ;
	
	sh:property [
		sh:path sh:deactivated ;
	] ;
	
	sh:property [
		sh:path sh:targetClass ;
	] ;
	
	sh:property [
		sh:path sh:targetNode ;
	] ;
	
	sh:property [
		sh:path sh:targetSubjectsOf ;
	] ;
	
	sh:property [
		sh:path sh:targetObjectsOf ;
	] ;
	
	sh:property [
		sh:path sh:message ;
	] ;
	
	sh:property [
		sh:path sh:severity ;
	] ;
	
	sh:property [
		sh:path sh:sparql ;
	] ;
	
	sh:property [
		sh:path sh:target ;
	] ;
	
	sh:property [
		sh:path sh:rule ;
	] ;
	
	sh:property [
		sh:path sh:property ;
	] ;
	
	sh:property [
		sh:path sh:and ;
	] ;
	
	sh:property [
		sh:path sh:not ;
	] ;
	
	sh:property [
		sh:path sh:or ;
	] ;
	
	sh:property [
		sh:path sh:xone ;
	] ;
	
	sh:property [
		sh:path sh:closed ;
	] ;
	
	sh:property [
		sh:path sh:ignoredProperties ;
	] ;
	
	sh:property [
		sh:path sh:node ;
	] ;
	
	sh:property [
		sh:path sh:nodeKind ;
	] .

	
bpsh:PropertyShapeShape		# propertyShape-properties
	a sh:NodeShape ;
	sh:targetClass sh:PropertyShape ;	
	sh:targetObjectsOf sh:property ;
	sh:ignoredProperties ( rdf:type rdfs:label rdfs:comment rdfs:seeAlso ) ;
	sh:closed true ;
	sh:severity sh:Warning ;
	
	sh:property [
		sh:path sh:deactivated ;
	] ;
	
	sh:property [
		sh:path sh:targetClass ;
	] ;
	
	sh:property [
		sh:path sh:targetNode ;
	] ;
	
	sh:property [
		sh:path sh:targetSubjectsOf ;
	] ;
	
	sh:property [
		sh:path sh:targetObjectsOf ;
	] ;
	
	sh:property [
		sh:path sh:message ;
	] ;
	
	sh:property [
		sh:path sh:severity ;
	] ;
	
	sh:property [
		sh:path sh:sparql ;
	] ;
	
	sh:property [
		sh:path sh:target ;
	] ;
	
	sh:property [
		sh:path sh:rule ;
	] ;
	
	sh:property [
		sh:path sh:path ;
	] ;
	
	sh:property [
		sh:path sh:defaultValue ;
	] ;
	
	sh:property [
		sh:path sh:description ;
	] ;
	
	sh:property [
		sh:path sh:group ;
	] ;
	
	sh:property [
		sh:path sh:name ;
	] ;
	
	sh:property [
		sh:path sh:order ;
	] ;
	
	sh:property [
		sh:path sh:class ;
	] ;
	
	sh:property [
		sh:path sh:in ;
	] ;
	
	sh:property [
		sh:path sh:languageIn ;
	] ;
	
	sh:property [
		sh:path sh:lessThan ;
	] ;
	
	sh:property [
		sh:path sh:lessThanOrEquals ;
	] ;
	
	sh:property [
		sh:path sh:maxCount ;
	] ;
	
	sh:property [
		sh:path sh:maxExclusive ;
	] ;
	
	sh:property [
		sh:path sh:maxInclusive ;
	] ;
	
	sh:property [
		sh:path sh:maxLength ;
	] ;
	
	sh:property [
		sh:path sh:minCount ;
	] ;
	
	sh:property [
		sh:path sh:minExclusive ;
	] ;
	
	sh:property [
		sh:path sh:minInclusive ;
	] ;
	
	sh:property [
		sh:path sh:minLength ;
	] ;
	
	sh:property [
		sh:path sh:hasValue ;
	] ;
	
	sh:property [
		sh:path sh:equals ;
	] ;
	
	sh:property [
		sh:path sh:disjoint ;
	] ;
	
	sh:property [
		sh:path sh:node ;
	] ;
	
	sh:property [
		sh:path sh:datatype ;
	] ;
	
	sh:property [
		sh:path sh:flags ;
	] ;
	
	sh:property [
		sh:path sh:pattern ;
	] ;
	
	sh:property [
		sh:path sh:qualifiedMinCount ;
	] ;
	
	sh:property [
		sh:path sh:qualifiedValueShapesDisjoint ;
	] ;
	
	sh:property [
		sh:path sh:qualifiedValueShape ;
	] ;
	
	sh:property [
		sh:path sh:uniqueLang ;
	] ;
	
	sh:property [
		sh:path sh:and ;
	] ;
	
	sh:property [
		sh:path sh:not ;
	] ;
	
	sh:property [
		sh:path sh:or ;
	] ;
	
	sh:property [
		sh:path sh:xone ;
	] ;
	
	sh:property [
		sh:path sh:nodeKind ;
	] .
