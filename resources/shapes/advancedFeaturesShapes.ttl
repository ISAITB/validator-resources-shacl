# baseURI: http://www.w3.org/ns/shacl-shacl#

# A SHACL shapes graph to validate Best Practices on SHACL shapes graphs
# Draft last edited 2020-03-12

@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sh:   <http://www.w3.org/ns/shacl#> .
@prefix xsd:  <http://www.w3.org/2001/XMLSchema#> .

@prefix adsh: <http://www.w3.org/ns/advanced-shacl#> .

adsh:
	rdfs:label "Advanced Features for SHACL"@en ;
	rdfs:comment "This shapes graph can be used to validate SHACL shapes graphs against a subset of advanced features of SHACL."@en ;
	sh:declare [
		sh:prefix "adsh" ;
		sh:namespace "http://www.w3.org/ns/advanced-shacl#"^^xsd:anyURI ;
	] .

adsh:TargetShape
	a sh:NodeShape ;
	sh:targetSubjectsOf sh:target ;
	
	sh:property [
		sh:path sh:target ;				
		sh:message "The values of sh:target at a shape are IRIs or blank nodes.";
		sh:or ( [ sh:nodeKind sh:BlankNode ] [ sh:nodeKind sh:IRI ] ) ;		# target-nodeKind
	] .


adsh:SPARQLTargetShape
	a sh:NodeShape ;			
	sh:targetClass sh:SPARQLTarget ;		
	
	sh:property [
		sh:path sh:select ;
		sh:message "SPARQL-based targets have exactly one value for the property sh:select.";
		sh:maxCount 1 ;					# SPARQLTarget-select-count
		sh:minCount 1 ;					# SPARQLTarget-select-count
	] ;	
	
	sh:property [
		sh:path sh:prefixes ;
		sh:message "SPARQL-based targets may have values for the property sh:prefixes and these values are IRIs or blank nodes.";
		sh:or ( [ sh:nodeKind sh:BlankNode ] [ sh:nodeKind sh:IRI ] ) ;		# SPARQLTarget-prefixes-nodeKind
	] ;
	
	sh:property [
		sh:path sh:select ;
		sh:message "Using the values of sh:prefixes as defined by 5.2.1 Prefix Declarations for SPARQL Queries, the values of sh:select must be valid SPARQL 1.1 SELECT queries with a single result variable this.";
		sh:pattern "^\\s*(SELECT)\\s+(\\?this)\\s+(WHERE)\\s+\\{.*" ;		# SPARQLTarget-select-sparql
		sh:flags "si" ;		
	] ;	
	
	sh:property [
		sh:path sh:ask ;
		sh:message "SPARQL-based targets have at most one value for the property sh:ask.";
		sh:maxCount 1 ;					# SPARQLTarget-ask-count
	] .

	
adsh:ResultAnnotationShape
	a sh:NodeShape ;
	sh:targetSubjectsOf sh:resultAnnotation ;
	
	sh:property [
		sh:path sh:resultAnnotation ;				
		sh:message "The values of sh:resultAnnotation are called result annotations and are either IRIs or blank nodes.";
		sh:or ( [ sh:nodeKind sh:BlankNode ] [ sh:nodeKind sh:IRI ] ) ;		# resultAnnotation-nodeKind
	] ;
	
	sh:property [
		sh:path (sh:resultAnnotation sh:annotationProperty) ;
		sh:message "Each result annotation has exactly one value for the property sh:annotationProperty and this value is an IRI.";
		sh:maxCount 1 ;					# annotationProperty
		sh:minCount 1 ;					# annotationProperty
	] ;
	
	sh:property [
		sh:path (sh:resultAnnotation sh:annotationVarName) ;
		sh:message "Each result annotation has at most 1 value for the property sh:annotationVarName.";
		sh:maxCount 1 ;					# annotationVarName
	] ;
	
	sh:property [
		sh:path (sh:resultAnnotation sh:annotationVarName) ;
		sh:message "The value of sh:annotationVarName must be a literal with datatype xsd:string.";
		sh:datatype xsd:string ;	 				# annotationVarName
	] .
	

adsh:ReturnTypeShape
	a sh:NodeShape ;
	sh:targetSubjectsOf sh:returnType ;	
	
	sh:property [
		sh:path sh:returnType ;
		sh:message "A function has at most one value for sh:returnType.";
		sh:maxCount 1 ;					# returnType-maxCount
	] ;
	
	sh:property [
		sh:path sh:returnType ;				
		sh:message "The values of sh:returnType are IRIs.";
		sh:nodeKind sh:IRI ;		# returnType-nodeKind
	] .
	
adsh:SPARQLFunctionCountShape
	a sh:NodeShape ;			
	sh:targetClass sh:SPARQLFunction ;	
	sh:message "SPARQL-based functions have exactly one value for either sh:ask or sh:select.";
	
	sh:xone (						# SPARQLFunction-query
		[
			sh:property [
				sh:path sh:ask ;
				sh:maxCount 1 ;	
				sh:minCount 1 ;
			]
		]
		[
			sh:property [
				sh:path sh:select ;
				sh:maxCount 1 ;	
				sh:minCount 1 ;
			] 
		]
	)  .
	
adsh:FilterShapeExpressionShape			# FilterShapeExpression
	a sh:NodeShape ;
	sh:targetSubjectsOf sh:filterShape ;
	sh:message "A filter shape expression is a blank node with exactly one value for sh:filterShape (which is a well-formed shape) and exactly one value for sh:nodes (which is a well-formed node expression)." ;
	
	sh:and (
		sh:property [
			sh:path sh:filterShape ;
			sh:maxCount 1 ;
			sh:minCount 1 ;
			sh:or ( [ sh:nodeKind sh:BlankNode ] [ sh:nodeKind sh:IRI ] ) ;	
		] 
		sh:property [
			sh:path sh:nodes ;
			sh:maxCount 1 ;
			sh:minCount 1 ;
		] 
	) .
	
	
adsh:PathExpressionShape			# PathExpression
	a sh:NodeShape ;
	sh:targetSubjectsOf sh:path ;
	sh:message "A path expression is a blank node with exactly one value of the property sh:path (which are well-formed property paths) and at most one value for sh:nodes (which is a well-formed node expression)." ;
	
	sh:and (
		sh:property [
			sh:path sh:path ;
			sh:maxCount 1 ;
			sh:minCount 1 ;
		] 
		sh:property [
			sh:path sh:nodes ;
			sh:maxCount 1 ;
		] 
	) .	


adsh:RueTypeShape					# Rule-type
	a sh:NodeShape ;
	sh:targetSubjectsOf sh:rule ;
	sh:message "Each SHACL rule has at least one rdf:type which is a IRI." ;
	
	sh:and (
		sh:property [
			sh:path (sh:rule rdf:type) ;
			sh:maxCount 1 ;
			sh:minCount 1 ;
		] 
		sh:property [
			sh:path (sh:rule rdf:type) ;
			sh:nodeKind sh:IRI ;
		] 
	) .	


adsh:OrderShape					
	a sh:NodeShape ;
	sh:targetSubjectsOf sh:order ;
	
	sh:property [					# rule-order-maxCount
		sh:path sh:order ;
		sh:maxCount 1 ;
		sh:message "Each rule or shape may have at most one value for the property sh:order." ;
	] ;
	sh:property [					# rule-order-datatype
		sh:path sh:order ;
		sh:nodeKind sh:Literal ;
		sh:or ( [ sh:datatype xsd:decimal ] [ sh:datatype xsd:integer ] [ sh:datatype xsd:byte ] [ sh:datatype xsd:int ] [ sh:datatype xsd:long ] [ sh:datatype xsd:negativeInteger ] [ sh:datatype xsd:nonNegativeInteger ] [ sh:datatype xsd:nonPositiveInteger ] [ sh:datatype xsd:positiveInteger ] [ sh:datatype xsd:shortunsignedLong ] [ sh:datatype xsd:unsignedInt ] [ sh:datatype xsd:unsignedShort ] [ sh:datatype xsd:unsignedByte ] ) ; 	
		sh:message "The values of sh:order at rules and shapes are literals with a numeric datatype such as xsd:decimal." ;
	] .
	

adsh:RuleTypeShape					
	a sh:NodeShape ;
	sh:targetSubjectsOf sh:rule ;
	
	sh:property [
		sh:path (sh:rule sh:deactivated) ;		# deactivated-maxCount
		sh:maxCount 1 ;
		sh:message "Each rule may have at most one value for the property sh:deactivated." ;
	] ;
	
	sh:property [								# deactivated-in
		sh:path (sh:rule sh:deactivated) ;
		sh:nodeKind sh:Literal ;
		sh:datatype xsd:boolean ;
		sh:message "The values of sh:deactivated are either of the xsd:boolean literals true or false." ;
	] .
	
adsh:SPARQLRuleConstructShape					
	a sh:NodeShape ;
	sh:targetClass sh:SPARQLRule ;
	
	sh:property [								# construct-count
		sh:path sh:construct ;
		sh:maxCount 1 ;
		sh:minCount 1 ;
		sh:message "SPARQL rules must have exactly one value for the property sh:construct." ;
	] ;
	
	sh:property [								# construct-count
		sh:path sh:construct ;
		sh:nodeKind sh:Literal ;
		sh:datatype xsd:string ;
		sh:message "The values of sh:construct are literals with datatype xsd:string." ;
	] .


adsh:TripleRuleShape
	a sh:NodeShape ;
	sh:targetClass sh:TripleRule ;
	
	sh:property [
		sh:path sh:subject ;		# tripleRule-subject
		sh:maxCount 1 ;
		sh:minCount 1 ;
		sh:message "Each triple rule must have exactly one value of the property sh:subject (which must be a well-formed node expression)." ;
	] ;
	
	sh:property [
		sh:path sh:predicate ;		# tripleRule-predicate
		sh:maxCount 1 ;
		sh:minCount 1 ;
		sh:message "Each triple rule must have exactly one value of the property sh:predicate (which must be a well-formed node expression)." ;
	] ;
	
	sh:property [
		sh:path sh:object ;			# tripleRule-object
		sh:maxCount 1 ;
		sh:minCount 1 ;
		sh:message "Each triple rule must have exactly one value of the property sh:object (which must be a well-formed node expression)." ;
	] .
	
