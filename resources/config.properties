validator.uploadTitle = SHACL shape validator
# A comma-separated list of supported validation types.
validator.type = core, extended, extended_best_practices
validator.typeLabel.core = Core W3C syntax rules
validator.typeLabel.extended = Extended W3C syntax rules
validator.typeLabel.extended_best_practices = Extended W3C syntax rules and best practices
# The SHACL files loaded for a given validation type (added as a postfix). This can be a file or folder (must never start with a '/').
validator.shaclFile.core = shapes/coreShapes.ttl
validator.shaclFile.extended = shapes/coreShapes.ttl, shapes/coreExtensionShapes.ttl, shapes/advancedFeaturesShapes.ttl
validator.shaclFile.extended_best_practices = shapes/coreShapes.ttl,shapes/coreExtensionShapes.ttl, shapes/advancedFeaturesShapes.ttl, shapes/bestPracticeShapes.ttl
# The default report syntax to use if none is provided.
validator.defaultReportSyntax = text/turtle
# Disable merging of models (to avoid the configured shapes validating themselves).
validator.mergeModelsBeforeValidation = false
# Labels.
validator.label.fileInputLabel = Shapes to validate
validator.label.fileInputPlaceholder = Select shapes file...
validator.label.typeLabel = Validate against
validator.label.contentSyntaxLabel = Shapes syntax
validator.label.contentSyntaxTooltip = Optional for shapes provided as a file or a URI if a known file extension is detected
# The banner message.
validator.bannerHtml = <div> <div style="display: table;"> <div style="display: table-row;"> <div style="display: table-cell; cursor: pointer;" onclick="window.location.href='upload'"><h1>SHACL shape validator</h1></div> </div> <div style="display: table-row;"> <div style="display: table-cell; padding-top: 20px;"> <p> <b>SHACL shapes</b> allow validation of RDF content against syntax and business rules. This service, available also via <a href="https://www.itb.ec.europa.eu/shacl/soap/shacl/validation?wsdl">SOAP</a> or <a href="https://www.itb.ec.europa.eu/shacl">REST</a> API, focuses on the implementation of these rules as SHACL shapes and allows you to validate them against the <a href="https://www.w3.org/TR/shacl/">SHACL specification</a>. </p> <p> Shapes can be validated against the specification's <b>core rules</b>, its <b>advanced features</b>, or optional <b>best practices</b> (click <a href="#" data-toggle="modal" data-target="#infoModal">here</a> for further details). For questions and feedback on this service please contact <a href="mailto:DIGIT-ITB@ec.europa.eu">DIGIT-ITB@ec.europa.eu</a>. </p> </div> </div> </div> <div class="modal fade" id="infoModal" role="dialog"> <div class="modal-dialog modal-lg" style="width: 90%; max-width: 1140px;"> <div class="modal-content"> <div class="modal-header"><h3>SHACL shape validation options</h3></div> <div class="modal-body"> <div style="display: table;"> <div style="display: table-row;"> <div style="display: table-cell; width: 36%;"> <img src="https://www.itb.ec.europa.eu/files/shacl/shacl_shacl_profiles.png" width="100%"/> </div> <div style="display: table-cell; padding-left: 20px; padding-right: 10px; padding-top: 10px; padding-bottom: 10px; vertical-align: top;"> <div> <p>Three validation options are provided for the validation of your SHACL shapes:</p> <ul> <li> <p><b>Core W3C syntax rules:</b> This option includes the <a href="https://www.w3.org/ns/shacl-shacl">official SHACL shapes</a> published by W3C implementing a subset of the <a href="https://www.w3.org/TR/shacl/#syntax-rules">SHACL syntax rules</a>.</p> </li> <li> <p><b>Extended W3C syntax rules:</b> This option includes the core rules (see above), extending them to cover the remaining <a href="https://www.w3.org/TR/shacl/#syntax-rules">SHACL syntax rules</a>. In addition, this option includes community-provided fixes from the <a href="https://github.com/w3c/data-shapes">SHACL GitHub repository</a> and an implementation of the rules to check <a href="https://www.w3.org/TR/shacl-af/">SHACL advanced features</a>.</p> </li> <li> <p><b>Extended W3C syntax rules and best practices:</b> This option includes all syntax rules (see previous options), extending them with additional shapes that provide suggestions based on compiled best practices (to view these click 'View additional details' below).</p> </li> </ul> <p> <b>Disclaimer:</b> The SHACL shapes implementing the <a href="https://www.w3.org/TR/shacl-af/">SHACL advanced features</a> and remaining core rules (see second option) as well as the list and implementation of best practices (see third option) result from the experience and work of the European Commission's DIGIT and specifically the <a href="https://joinup.ec.europa.eu/solution/interoperability-test-bed">Interoperability Test Bed team</a> and the <a href="https://joinup.ec.europa.eu/collection/semantic-interoperability-community-semic">Semantic Interoperability Community (SEMIC)</a>. These are provided for the benefit of SHACL shape developers but should not be considered as endorsed by W3C nor be used for formal conformance testing. </p> <div style="margin-top: 20px;"> <button id="viewButton" class="btn btn-default" type="button">View additional details</button> <script> $(document).ready(function() { $("#viewButton").on("click", function () { if ($("#detailedRules").is(":hidden")) { $("#detailedRules").show(); $("#viewButton").html('Hide additional details'); } else { $("#detailedRules").hide(); $("#viewButton").html('View additional details'); } }); $('#infoModal').on('show.bs.modal', function () { $("#detailedRules").hide(); }); }); </script> </div> </div> </div> </div> </div> <div id="detailedRules" style="display: none;"> <div> <hr/> <h4>Best practice rules</h4> <table class="table"> <thead> <tr> <th scope="col">Rule ID</th> <th scope="col">Target</th> <th scope="col">Severity</th> <th scope="col">Description</th> </tr> </thead> <tbody> <tr> <td>text-language</td> <td>sh:name / sh:description</td> <td>Warning</td> <td>Both sh:name and sh:description may have multiple values, but should only have one value per language tag.</td> </tr> <tr> <td>message</td> <td>sh:message</td> <td>Warning</td> <td>A shape should have at least one value for sh:message in the shapes graph, then all validation results produced as a result of the shape will have exactly these messages (as natural language) as their value of sh:resultMessage.</td> </tr> <tr> <td>message-language</td> <td>sh:message</td> <td>Warning</td> <td>A shape should not have more than one value for sh:message with the same language tag.</td> </tr> </tbody> </table> </div> <div> <hr/> <h4>Rules pending implementation</h4> <table class="table"> <thead> <tr> <th scope="col">Category</th> <th scope="col">Rule ID</th> <th scope="col">Target</th> <th scope="col">Severity</th> <th scope="col">Description</th> </tr> </thead> <tbody> <tr> <td>Core specification</td> <td>PATH-position</td> <td>-</td> <td>Error</td> <td>The only legal use of the variable PATH in the SPARQL queries of SPARQL-based constraints and SELECT-based validators is in the predicate position of a triple pattern.</td> </tr> <tr> <td>Core specification</td> <td>prefixes-duplicates</td> <td>-</td> <td>Error</td> <td>A SHACL processor collects a set of prefix mappings as the union of all individual prefix mappings that are values of the SPARQL property path sh:prefixes/owl:imports*/sh:declare of the SPARQL-based constraint or validator. If such a collection of prefix declarations contains multiple namespaces for the same value of sh:prefix, then the shapes graph is ill-formed.</td> </tr> <tr> <td>Core specification</td> <td>ConstraintComponent</td> <td>-</td> <td>Error</td> <td>A SPARQL-based constraint component is an IRI that has SHACL type sh:ConstraintComponent in the shapes graph.</td> </tr> <tr> <td>Core specification</td> <td>parameter-name-unique</td> <td>-</td> <td>Error</td> <td>A constraint component where two or more parameter declarations use the same parameter names is ill-formed.</td> </tr> <tr> <td>Core specification</td> <td>ConstraintComponent-parameter</td> <td>-</td> <td>Error</td> <td>Every constraint component has at least one non-optional parameter.</td> </tr> <tr> <td>Advanced features</td> <td>node-expressions-recursion</td> <td>sh:nodes</td> <td>Error</td> <td>A node expression cannot recursively have itself as a "nested" node expression.</td> </tr> <tr> <td>Advanced features</td> <td>intersection</td> <td>sh:intersection</td> <td>Error</td> <td><ul> <li>Intersection expression is a blank node with exactly one value for the property sh:intersection.</li> <li>Intersection expression is a well-formed SHACL list with at least two members.</li></ul> </td> </tr> <tr> <td>Advanced features</td> <td>union</td> <td>sh:union</td> <td>Error</td> <td><ul> <li>Union expression is a blank node with exactly one value for the property sh:union.</li> <li>Union expression is a well-formed SHACL list with at least two members.</li> </ul></td> </tr> <tr> <td>Advanced features</td> <td>Expression-scope</td> <td>sh:expression</td> <td>Error</td> <td>The values of sh:expression at a shape must be well-formed node expressions.</td> </tr> <tr> <td>Advanced features</td> <td>Condition-node</td> <td>sh:condition</td> <td>Error</td> <td>The values of sh:condition at a rule must be well-formed shapes.</td> </tr> <tr> <td>Advanced features</td> <td>FunctionExpression</td> <td>-</td> <td>Error</td> <td>A function expression is a blank node that does not fulfill any of the syntax rules of the other node expression types and which is the subject of exactly one triple T where the object is a well-formed SHACL list, and each member of that list is a well-formed node expression.</td> </tr> <tr> <td>Best practices</td> <td>order</td> <td>sh:order</td> <td>Warning</td> <td>If present at property shapes, the recommended use of sh:order is to sort the property shapes in an ascending order, for example so that properties with smaller order are placed above (or to the left) of properties with larger order.</td> </tr> <tr> <td>Best practices</td> <td>defaultvalue-datatype</td> <td>sh:defaultValue</td> <td>Warning</td> <td>The value type of the sh:defaultValue should align with the specified sh:datatype or sh:class of the same shape.</td> </tr> <tr> <td>Best practices</td> <td>lists</td> <td>rdf:list</td> <td>Warning</td> <td>Avoid large rdf:list due to their inefficiency.</td> </tr> <tr> <td>Best practices</td> <td>namespace-prefixes</td> <td>@prefix</td> <td>Warning</td> <td>Prefixes for all namespaces SHOULD be defined.</td> </tr> <tr> <td>Best practices</td> <td>name-nodeshape</td> <td>-</td> <td>Warning</td> <td>The local name of the NodeShape SHALL be the ClassName + Shape.</td> </tr> <tr> <td>Best practices</td> <td>label-nodeshape</td> <td>sh:NodeShape</td> <td>Warning</td> <td>Every NodeShape SHOULD contain rdfs:label and rdfs:comment, and they SHOULD only have one value per language tag.</td> </tr> <tr> <td>Best practices</td> <td>name-property</td> <td>sh:property</td> <td>Warning</td> <td>Each property SHALL have a sh:name (in the context of the target where it appears) to provide human-oriented labels. This is the preferred alternative to overwriting rdfs:labels coming from external foreign vocabularies to fit the context better.</td> </tr> <tr> <td>Best practices</td> <td>description-property</td> <td>sh:property</td> <td>Warning</td> <td>Each property SHOULD have sh:description (in the context of the target where it appears) to provide further human-oriented details. This is the preferred solution over adding additional usage notes to fit the context.</td> </tr></tbody> </table> </div> </div> </div> <div class="modal-footer"><button type="button" class="btn btn-default" data-dismiss="modal">Close</button></div> </div> </div> </div> <hr /></div>
